#include<iostream>
#include<vector>
#include<map>
#include<algorithm>

using namespace std;
bool isSafe(int v,vector<vector<int>>&graph,vector<int>&color,int c)
{
    for(int i=0;i<graph.size();i++)
    {
        if(graph[v][i] && c==color[i])
        {
            return false;
        }
    }
    return true;
}
bool graphColoringUtil(vector<vector<int>>&graph,int m,vector<int>&color,int v)
{
    if(v==graph.size())
    {
        return true;
    }
    for(int c=1;c<=m;c++)
    {
        if(isSafe(v,graph,color,c))
        {
            color[v]=c;
           
            if(graphColoringUtil(graph,m,color,v+1))
            {
                return true;
            }
            color[v]=0;
        }
    }
    return false;
}
void graphColoring(vector<vector<int>>&graph,int m)
{
    vector<int>color(graph.size(),0);
    if(graphColoringUtil(graph,m,color,0))
    {
        cout<<"Solution Exists:The colors are assigned to vertices are\n";
        for(int i=0;i<color.size();i++)
        {
            cout<<"Vertex"<<i<<":Color"<<color[i]<<"\n";
        }
    }
    else
    {
        cout<<"Solution does not exists\n";
    }
}
int main()
{
    int n;
    cout<<"Enter the number of vertices:";
    cin>>n;
   
    vector<vector<int>>graph(n,vector<int>(n,0));
   
    cout<<"Enter the adjacency matrix:\n";
    for(int i=0;i<n;i++)
    {
        for(int j=0;j<n;j++)
        {
            cin>>graph[i][j];
        }
    }
    int m;
    cout<<"Enter the number of colors:";
    cin>>m;
    graphColoring(graph,m);
    return 0;
}