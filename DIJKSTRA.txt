#include <iostream>
#include <vector>
#include <queue>
#include <limits>

using namespace std;

#define INF numeric_limits<int>::max()

void dijkstra(vector<vector<pair<int, int>>>& graph, int src, vector<int>& dist) {
    int V = graph.size();
    dist.assign(V, INF);
    dist[src] = 0;

    priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> pq;
    pq.push(make_pair(0, src));

    while (!pq.empty()) {
        int u = pq.top().second;
        int d = pq.top().first;
        pq.pop();

        if (d > dist[u]) continue;

        for (auto& neighbor : graph[u]) {
            int v = neighbor.first;
            int weight = neighbor.second;

            if (dist[v] > dist[u] + weight) {
                dist[v] = dist[u] + weight;
                pq.push(make_pair(dist[v], v));
            }
        }
    }
}

int main() {
    int V = 6;
    vector<vector<pair<int, int>>> graph(V);

    graph[0].push_back(make_pair(1, 5));
    graph[0].push_back(make_pair(2, 3));
    graph[1].push_back(make_pair(3, 6));
    graph[1].push_back(make_pair(4, 4));
    graph[2].push_back(make_pair(3, 7));
    graph[3].push_back(make_pair(5, 8));
    graph[4].push_back(make_pair(5, 9));

    int source = 0;
    vector<int> shortest_paths;
    dijkstra(graph, source, shortest_paths);

    cout << "Shortest paths from node " << source << ":\n";
    for (int i = 0; i < shortest_paths.size(); ++i) {
        cout << "Node " << i << ": " << shortest_paths[i] << endl;
    }

    return 0;
}
